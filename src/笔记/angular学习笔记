angular配置：
  1.node_modules中保存的是angular自带的包和第三方包，项目中用npm下载的包
  都是下载到该文件夹下（类似web项目下的lib文件夹）
  2.package.json文件是一个包引用的json文件里面表面了本项目引用了
  哪些包，在该文件中dependencies下配置的是用于开发环境的，devdependencies下的都是
  引用不用于生产环境（该文件的作用类似于maven的pox.xml文件，以及eclipse中的添加到配置引用路径）

  3.在下载引用包时（在项目根路径下）:
   npm install "packagename" --save 表示该包引用写入package.json中的dependencies对象
   npm install "packagename" --save-dev 表示该包引用写入package.json中的devDependencies对象中

  4.angular-cli.json 是 Angular命令行工具的配置文件（现在被angular.json替代）在下载完像jquery与bootstrap后需要将他们的相对路径写入
  到angular-cli.json 下的 styles与scripts中去：
  styles中就是我们要引入的css
  scripts中就是我们要引入的js
  5.在下载完包，加完依赖后，还不能直接用，因为语言的不同（Angular是typeScript开发的）必须安装他们的类型描述文件
  npm install @types/jquery --save-dev,下载完后将类型写入到tsconfig.app.json中去
  值得注意的是：这是对应外部的包（非typescript开发的）才需要的东西@types类型描述文件。但是并不是每一个插件都有@types
  所以第二种解决方法：
  Steps1：引入WX的SDK文件
  <script src="http://res.wx.qq.com/open/js/jweixin-1.2.0.js"></script>
   Steps2：声明变量wx

  6.angular6 后没有angular.cli.json文件了，只有angular.json文件了，而且路径配置路径好像也以配置文件为准了(以前以src)
  Angular核心：组件。组件可以注入服务。
angular基础：
  1.组件：是Angular的基本构件块
  2.3类文件：.ts文件中定义了商品的信息以及这些商品具有的方法，类似java中的类
  	.html不做解释，前端显示

  3.*ngFor 是一个 "结构型指令"。结构型指令会通过添加、删除和操纵它们的宿主元素等方式塑造或（类似JSTL的for：）重塑 55DOM 的结构。任何带有 * 的指令都是结构型指令,注意：结构性指令都采用的驼峰命名。
  //
  4.插值语法类似于el，把值通过{{对象.属性}}的方式取出
  //
  5.属性绑定：[]=value，[sex]=men表示为某个类型的sex赋值men。
  //
  6.事件绑定：（事件）="定义的方法"，(click)="share()" 表示将某个标签的click事件绑定到share（）方法上，注意：当上下文有某个对象时，传参可以直接加到方法中去，不需要用+号来隔开（拼接参数），直接(click)="myshare(product)"就行
  //
  7.
  组件包含三部分：

  一个组件类，它用来处理数据和功能。上一节，我们在组件类中定义了商品数据和 share() 方法。

  一个 HTML 模板，它决定了用户的呈现方式。在上一节中，你修改了商品列表的 HTML 模板，以显示每个商品的名称、描述和 “Share” 按钮。

  组件专属的样式定义了外观和感觉。商品列表中还没有定义任何样式。(官方的解释)
  //
  8.index.html主要加载:主应用程序组件（模块化中最外层模块）类似于代码中的main函数
  9.在组件中引入包的指令：import { Component } from '@angular/core';@angular/core这个配置在backage.json中
  所有可以不用通过去引用实际的路径导入。
  10.@Component({
       selector: 'app-driver-list',
       templateUrl: './driver-list.component.html',
       styleUrls: ['./driver-list.component.css']
     })
     @Drirective ( {
       selector: 'input[log-directive ]’表示对有input元素和log-directive属性的元素起作用
       host: {
          'input' ：'oninput（$event ）' host表示要附加指令的元素
        }
     })
     class logDrirective（）{
        onInput（event）{ 真正要处理事件的程序。
        }
     }
  @Component注解更像是一种配置对组件的配置，而@Drirective更像是一种装饰，将已经存在的标签或组件增强。
  import 导入模块时，先会在映射文件中匹配映射，找不到会将其当做一个完整的路径去找。

  1.先实现数据展示：使用angular的table组件
三：
  Angular Route 路由
  Routes 、 RouterOutlet、 Router、 RouterLink、ActivatedRoute
  Routes：路由配置器：保存着哪个URL对应展示哪个组件以及在哪个RouterOutlet
  RouterOutlet：在html中标记路由内容呈现的位置的占位符指令
  Router：负责在运行时执行路由的对象，可以通过调用其navigate()和navigateByUrl()方法来导航到一个指定的路由
  RouterLink：在html中申明路由导航用的指令
  ActivatedRoute：当前激活的路由对象，保存着当前路由的信息，如路由地址，路由参数


数据绑定：
<input (input)="onInputEvent($event)">
:表示当input标签的input事件被触发时调用组件控制器中的onInoutEvent方法
<inpout (click)="saved = true">
也可以直接就对控制器中的属性赋值

{{}}与[]=""类似的（在标签属性绑定时）
要注意dom属性与html属性的区别：
dom属性是对象属性实时在变，html只指定初始值
比如在：<button disabled/>禁用属性，此属性为html属性，即使设置<button disabled="false"/>依旧不可用

html属性与Dom属性的关系：
不是同一个东西，html指定初值，dom指定当前值，有些标签两个属性有对应关系，angular中绑定的是dom属性值

html属性绑定：
<td [attr.colspan]="tableColspan">something </td>
class属性：
1.完全替换
基本html绑定：<div class="aaa bbb" [class]="someExpression"
2.部分替换

双向绑定[()]="mode";
管道：对初始值进行处理然后显示
1.日期管道
2.number管道
3.异步流管道
...
自定义管道，通过ng命令
无论是组件还是管道都要在app.module.ts中声明


 [nzData]="listOfAllData"
  <!--翻页事件与currentPageDataChange($event)方法绑定-->
      nzShowCheckbox
      <!--双向绑定，当选中或取消全选框后，通过nzChecked事件将isAllDisplayDataChecked变为true或false（可能是鼠标点击来确定）-->
      [(nzChecked)]="isAllDisplayDataChecked"
      <!--部分选中属性与isIndeterminate，这个属性主要是控制Checkbox的ui-->
      [nzIndeterminate]="isIndeterminate"
      <!--选择改变事件，与checkAll方法绑定-->
      (nzCheckedChange)="checkAll($event)"

<td
      nzShowCheckbox
      <!--这里是一个双向绑定数据的方法nzChecked，当鼠标点击改变选中状态时，mapOfCheckedId中对应的值也会更改-->
      [(nzChecked)]="mapOfCheckedId[data.id]"
      <!--这是当选中状态更改后，通知页面刷新-->
      (nzCheckedChange)="refreshStatus()"
    >


路由：SPA（类似Python的Django）
 传递参数的三种方式：
 1.在查询参数中传递数据
 {path:"driver/:id",component:DriverDetailComponent} =>在目标路由中通过ActivateRoute.parems[id]拿
 2.在路由路径中传递数据
 /path?id=1  => 在目标路由中通过ActivateRoute.query("id")拿到
 3.在路由配置中传递参数
 一般传递一些静态参数
 {path:"driver/:data.id",component:DriverDetailComponent，data:[{id:0}]}
 [routerLink]是在html中配置路由
 router是在控制器中控制路由

 管道：
  新建自定义管道命令：ng g pipe pipe/管道名

使用modal分两步：1.在准备组件中先申明modalRef:BsModalRef;利用自动注入一个private modalService:BsModalService，
然后使用this.modalRef=this.modalService.show(DriverDetailComponent）
2.在目标组件中使用自动注入注入一个public modalRef:BsModalRef

注意在表单中为value绑定值时使用[value]与value的区别很大，若是数据为空,[value]写法容易报错

当[(ngModal)]="属性"用到input上时，驱动事件为input事件，实现双向绑定

http服务：

